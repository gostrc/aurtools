#!/bin/bash

base_packages='base base-devel sudo'

cmd="$(basename "${0%-build}")"
if [ "${cmd%-*}" == 'multilib' ]; then
        repo="${cmd}"
        _arch='x86_64'
	base_packages+=' gcc-multilib libtool-multilib'
else
	repo=${cmd%-*}
	_arch=${cmd##*-}
fi
chroots='/var/tmp/aurtoolsbuild'
clean_first=false

usage() {
	echo "usage $(basename "$0")"
	echo '    -c         Recreate the chroot before building'
	echo '    -r <dir>   Create chroots in this directory'
	exit 1
}

while getopts 'cr:' arg; do
	case "${arg}" in
		c) clean_first=true ;;
		r) chroots="$OPTARG" ;;
		*) usage ;;
	esac
done

. /etc/aurtools.conf || (echo 'failed to source /etc/aurtools.conf, now exiting' && exit 1)

# keep cache and repos seperate to avoid problems
AURREPODIR=${AURREPODIR}/${_arch}
AURCACHEDIR=${AURCACHEDIR}/${_arch}

mkdir -p ${AURREPODIR}
mkdir -p ${AURCACHEDIR}

###############################################################################
# Auto dependency resolution
###############################################################################

. PKGBUILD || { echo 'failed to source PKGBUILD'; exit 1; }

for package in ${depends[@]}; do
  packagename=$(cower -i ${package} 2> /dev/null | awk '/Name/ { print $3 }')
  packageversion=$(cower -i ${package} 2> /dev/null | awk '/Version/ { print $3 }')

  if [ ! -z ${packagename} ]; then
    # not in main repos, check if in our local repo
    if [ ! -f ${AURREPODIR}/${packagename}-${packageversion}-${_arch}.pkg.tar.xz ]; then
      # not in our local repo, recurse
      cower -d ${package}
      pushd ${package}
      aur-${_arch}-build
      if [[ $? == 1 ]]; then
        echo "failed to build ${package} as a dependencity"
        exit 1
      fi
      popd
    fi
  fi
done

###############################################################################
# end of Auto dependency resolution
###############################################################################

if ${clean_first} || [ ! -d "${chroots}/${repo}-${_arch}" ]; then
	echo "Creating chroot for [${repo}] (${_arch})..."
	sudo rm -rf ${chroots}/${repo}-${_arch}
	sudo mkdir -p ${chroots}/${repo}-${_arch}
	setarch ${_arch} sudo mkarchroot \
		-C /usr/share/aurtools/pacman-${repo}.conf \
		-M /usr/share/devtools/makepkg-${_arch}.conf \
		${chroots}/${repo}-${_arch}/root \
		${base_packages}
	sudo mkdir -p ${chroots}/${repo}-${_arch}/root/var/tmp/aurtoolsrepo
	sudo mount --bind ${AURREPODIR} ${chroots}/${repo}-${_arch}/root/var/tmp/aurtoolsrepo/
	sudo mkdir -p ${chroots}/${repo}-${_arch}/root/var/cache/pacman/pkg/
	sudo mount --bind ${AURCACHEDIR} ${chroots}/${repo}-${_arch}/root/var/cache/pacman/pkg/
else
	sudo mkdir -p ${chroots}/${repo}-${_arch}/root/var/tmp/aurtoolsrepo
	sudo mount --bind ${AURREPODIR} ${chroots}/${repo}-${_arch}/root/var/tmp/aurtoolsrepo/
	sudo mkdir -p ${chroots}/${repo}-${_arch}/root/var/cache/pacman/pkg/
	sudo mount --bind ${AURCACHEDIR} ${chroots}/${repo}-${_arch}/root/var/cache/pacman/pkg/
	setarch ${_arch} sudo mkarchroot \
		-u \
		${chroots}/${repo}-${_arch}/root
fi

echo "Building in chroot for [${repo}] (${_arch})..."
setarch ${_arch} sudo makechrootpkg -c -r ${chroots}/${repo}-${_arch}

sudo umount ${chroots}/${repo}-${_arch}/root/var/tmp/aurtoolsrepo/
sudo umount ${chroots}/${repo}-${_arch}/root/var/cache/pacman/pkg/

repo-add ${AURREPODIR}/aurtools.db.tar.gz *.pkg.tar.xz
cp *.pkg.tar.xz ${AURREPODIR}
